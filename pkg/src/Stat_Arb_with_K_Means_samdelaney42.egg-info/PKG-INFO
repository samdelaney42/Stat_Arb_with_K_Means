Metadata-Version: 2.1
Name: Stat-Arb-with-K-Means-samdelaney42
Version: 0.0.1
Summary: Cluster stocks to find pairs and backtest them in stat arb model
Home-page: https://github.com/samdelaney42/Stat_Arb_with_K_Means
Author: Sam Delaney
Author-email: smd575@nyu.edu
License: UNKNOWN
Project-URL: Bug Tracker, https://github.com/samdelaney42/Stat_Arb_with_K_Means/issues
Description: # K_Means
        
        In this project I aim to re-create the unsupervised machine learning k-means clustering technique with random and plusplus initialization methods, then use the principals of this class in a stat arb trading model to find non-traditional pairs.
        
        To do:
        - [ ] Test stat arb strat with different:
          - [ ] beta lookback periods
          - [ ] Z score entry and exit thresholds
        - [ ] Itterate through clusters and generate porfolios with multiple pairs positions
        - [ ] explore using batch API calls to retrive stock data
        
        - [x] implement stop loss function at spread z-score = 3 sigma
          - [ ] could pair this with re performing ADF to check if basic hypothesis has been nullified 
          
        - [x] PCA for features?
        - [ ] trailing stop loss
          - [x] Add discrete positon sizing
          - [ ] Add $ value stop loss / take profit 
          - [ ] Explore momentum as extra validation layer for trade criteria
        - [ ] daily updated portfolio summary
        - [ ] IEX & EDGAR API Daily pull to keep base clustering info up to date 
           - https://github.com/datasets/s-and-p-500-companies-financials     
        - performance metrics:
          - [x] CAGR
          - [x] Sharpe
          - [ ] Calmar
          - [x] Maximum Drawdown
          - [ ] Maximum Drawdown Duration
        
          - Sharpe assumes Gaussian returns. That is why Maximum Drawdown is used to reveal the tail risks. Similar assumptions when you compute the portfolio risk & return. Beware of the covariance matrix. 
        
        - [ ] Dynamic stop-loss implementation with DQN?
        - [ ] Perhaps use descision tree
           
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
